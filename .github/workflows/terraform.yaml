name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE }}
          role-session-name: GitHubOIDC
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy S3 Terraform S3 backend
        id: terraform-s3-backend
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: "tf-aurora-pgsql-state"
          template: cloudformation/terraform-s3-backend.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_IAM,CAPABILITY_NAMED_IAM"

      - uses: hashicorp/setup-terraform@v2
        #with:
        #  terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ steps.terraform-s3-backend.outputs.StateBucketName }}" \
            -backend-config="dynamodb_table=${{ steps.terraform-s3-backend.outputs.LockTableName }}" \
            -backend-config="encrypt=true" \
            -backend-config="kms_key_id=${{ steps.terraform-s3-backend.outputs.KmsKeyId }}" \
            -backend-config="region=${{ steps.terraform-s3-backend.outputs.Region }}" \
            -backend-config="role_arn=${{ steps.terraform-s3-backend.outputs.RoleArn }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_ct_management_account_id: ${{ secrets.CT_MANAGEMENT_ACCOUNT_ID }}
          TF_VAR_log_archive_account_id: ${{ secrets.LOG_ARCHIVE_ACCOUNT_ID }}
          TF_VAR_audit_account_id: ${{ secrets.AUDIT_ACCOUNT_ID }}
          TF_VAR_aft_management_account_id: ${{ secrets.AFT_MANAGEMENT_ACCOUNT_ID }}
          TF_VAR_github_username: ${{ github.actor }}
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_ct_management_account_id: ${{ secrets.CT_MANAGEMENT_ACCOUNT_ID }}
          TF_VAR_log_archive_account_id: ${{ secrets.LOG_ARCHIVE_ACCOUNT_ID }}
          TF_VAR_audit_account_id: ${{ secrets.AUDIT_ACCOUNT_ID }}
          TF_VAR_aft_management_account_id: ${{ secrets.AFT_MANAGEMENT_ACCOUNT_ID }}
          TF_VAR_github_username: ${{ github.actor }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      # - name: Terraform Destroy
      #   env:
      #     TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform destroy -auto-approve -input=false